@using BlazorElectronics.Client.Models
@inherits RazorView
<nav aria-label="Search Result Pagination">
    <ul class="pagination">
        <li class="page-item @GetPreviousDisabledClass()">
            <a class="page-link" href="javascript:void(0)" @onclick="() => ChangePage( CurrentPage - 1 )">Previous</a>
        </li>
        
        @for ( var i = StartPage; i <= EndPage; i++ )
        {
            int index = i;
            <li class="page-item @(CurrentPage == i ? "active" : "")">
                <a class="page-link" href="javascript:void(0)" @onclick="() => ChangePage( index )">@i</a>
            </li>
        }
        
        <li class="page-item @GetNextDisabledClass()">
            <a class="page-link" href="javascript:void(0)" @onclick="() => ChangePage( CurrentPage + 1 )">Next</a>
        </li>
    </ul>
</nav>

@code 
{
    int CurrentPage = 1;
    int TotalPages = 1;
    int StartPage = 0;
    int EndPage = 0;
    
    [Parameter] public EventCallback<int> OnPageChange { get; set; } = default!;
    
    public void UpdateTotalPages( int rowsPerPage, int totalResults )
    {
        TotalPages = ( totalResults + rowsPerPage - 1 ) / rowsPerPage; // Round up to ensure correct page count
        UpdateStartAndEndPages();
        StateHasChanged();
    }
    public void SetCurrentPage( int page )
    {
        CurrentPage = page;
        UpdateStartAndEndPages();
        StateHasChanged();
    }

    async Task ChangePage( int page )
    {
        if ( page < 1 )
            page = 1;

        if ( page > TotalPages )
            page = TotalPages;

        CurrentPage = page;
        await OnPageChange.InvokeAsync( page );
    }
    
    void UpdateStartAndEndPages()
    {
        int newStartPage = Math.Max( 1, CurrentPage - 2 );
        int newEndPage = Math.Min( TotalPages, CurrentPage + 2 );

        if ( CurrentPage - newStartPage < 2 )
            newEndPage = Math.Min( TotalPages, newEndPage + ( 2 - ( CurrentPage - newStartPage ) ) );

        if ( newEndPage - CurrentPage < 2 )
            newStartPage = Math.Max( 1, newStartPage - ( 2 - ( newEndPage - CurrentPage ) ) );

        StartPage = newStartPage;
        EndPage = newEndPage;
    }
    string GetPreviousDisabledClass() => CurrentPage == 1 ? "disabled" : "";
    string GetNextDisabledClass() => CurrentPage >= TotalPages ? "disabled" : "";
}