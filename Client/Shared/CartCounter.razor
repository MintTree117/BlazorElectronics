@using Blazored.LocalStorage
@using BlazorElectronics.Client.Models
@using BlazorElectronics.Client.Services.Cart
@using BlazorElectronics.Client.Services.Users
@using BlazorElectronics.Shared

@inherits RazorView
@implements IDisposable
@inject ICartServiceClient CartService

<div class="cart-counter d-flex flex-row me-3">
    <button class="btn cart-counter me-1" @onclick="GoToCart">
        <i class="oi oi-cart"></i>
    </button>
    <div class="d-flex flex-column align-items-start">
        <span class="d-block text-muted"><small>@_cartCount Items</small></span>
        <span class="d-block fw-bold">$@_cartPrice</span>
    </div>
</div>

@code 
{
    string _message = string.Empty;
    int _cartCount = 0;
    decimal _cartPrice = 0;

    public void Dispose()
    {
        CartService.OnChange -= OnCartChange;
    }
    protected override void OnInitialized()
    {
        CartService.OnChange += OnCartChange;
    }
    protected override async Task OnInitializedAsync()
    {
        /*ServiceReply<CartInfoModel> infoReply = await CartService.GetLocalCartInfo();

        if ( !infoReply.Success || infoReply.Data is null )
            return;
        
        _cartCount = infoReply.Data.Quantity;
        _cartPrice = infoReply.Data.TotalPrice;
        StateHasChanged();*/
    }

    void GoToCart()
    {
        NavManager.NavigateTo( "cart" );
    }
    void OnCartChange( CartInfoModel cartInfo )
    {
        _cartCount = cartInfo.Quantity;
        _cartPrice = cartInfo.TotalPrice;
        StateHasChanged();
    }
}