@inherits RazorView

<div class="container-fluid mb-3 py-3 border-bottom shadow-bottom lg-content-wrapper">
    <div class="product-list-header">
        
        <div class="product-list-breadcrumb d-flex flex-row flex-wrap align-items-center w-100">
            <nav aria-label="breadcrumb" class="me-3">
                <ol class="breadcrumb h4 mb-0"> <!-- Adjust h4 to your preferred size -->
                    @foreach ( KeyValuePair<string, string> kvp in _urls )
                    {
                        if ( kvp.Equals( _urls.Last() ) )
                        {
                            <li class="breadcrumb-item active" aria-current="page">@_urls.Last().Key</li>
                        }
                        else
                        {
                            <li class="breadcrumb-item">
                                <a class="text-muted" href="@kvp.Value">@kvp.Key</a>
                            </li>
                        }
                    }
                </ol>
            </nav>
            <span class="d-block text-muted">@GetViewRows()</span>
        </div>

        <div class="product-header-buttons gap-1">
            <button class="btn btn-primary filters-mobile-button" onclick="@OpenFilters">Filters</button>
            <div class="dropdown">
                <button class="btn btn-outline-secondary dropdown-toggle" type="button" id="Rows" data-bs-toggle="dropdown" aria-expanded="false">
                    Rows: @_rowsPerPage
                </button>
                <ul class="dropdown-menu" aria-labelledby="Rows">
                    @for ( int i = 0; i < _rowsPerPageOptions.Count; i++ )
                    {
                        int localIndex = i; // Create a local copy of the loop variable
                        <li><button class="dropdown-item" type="button" @onclick="async () => await SelectRows( localIndex )">@_rowsPerPageOptions[ localIndex ]</button></li>
                    }
                </ul>
            </div>
            <div class="dropdown">
                <button class="btn btn-outline-secondary dropdown-toggle" type="button" id="SortBy" data-bs-toggle="dropdown" aria-expanded="false">
                    Order by: @_currentSortOption
                </button>
                <ul class="dropdown-menu" aria-labelledby="SortBy">
                    @for ( int i = 0; i < _sortOptions.Count; i++ )
                    {
                        int localIndex = i; // Create a local copy of the loop variable
                        <li><button class="dropdown-item" type="button" @onclick="async () => await SelectSort( localIndex )">@_sortOptions[ localIndex ]</button></li>
                    }
                </ul>
            </div>
        </div>
            
    </div>
</div>
