@using BlazorElectronics.Shared.Products.Search
@using BlazorElectronics.Client.Shared
@using BlazorElectronics.Shared.Categories
@using BlazorElectronics.Shared.Vendors
@inherits RazorView

<div class="product-list-container pt-3">
    <h3 class="text-decoration-underline m-0 mb-3 p-0">Results</h3>
    
    <div class="product-list-inner">
        @if ( _search is null )
        {
            <span>Loading Products...</span>
        }
        else if ( _search.Products.Count <= 0 )
        {
            <span>No Matches Found.</span>
        }
        else
        {
             foreach ( ProductSummaryDto p in _search.Products )
             {
                 int roundedRating = ( int ) Math.Round( p.Rating );
                 <div class="product-card bg-light shadow">
                     <a href="@Routes.PRODUCT/@p.Id" class="product-card-image">
                         <img src="@p.Thumbnail" alt="@p.Title"/>
                     </a>
                     <div class="product-card-body">
                         <div class="mb-2">
                             <a class="product-card-title" href="@Routes.PRODUCT/@p.Id">
                                 <h4>@p.Title</h4>
                             </a>

                             <div class="d-flex flex-row">
                                 <StarRating Rating="@p.Rating"></StarRating>
                                 <a class="ms-3 text-decoration-none" href="@Routes.PRODUCT/@p.Id?showReviews=true">@p.NumberReviews</a>
                             </div>
                             <span class="text-muted"><small>@p.NumberSold purchased</small></span>
                         </div>
                         <div class="product-categories">
                             @foreach ( int id in p.Categories )
                             {
                                 if ( !_categories.TryGetValue( id, out CategoryFullDto? c ) )
                                     continue;

                                 <a class="d-inline-block btn btn-sm btn-outline-secondary me-2 mb-2" href="@Routes.SEARCH/@c.ApiUrl">@c.Name</a>
                             }
                         </div>
                         <div>
                             <span class="mb-1 text-muted"><small>Sold By:</small></span>

                             @if ( _vendors.TryGetValue( p.VendorId, out VendorDto? v ) )
                             {
                                 <a class="product-card-vendor mb-2" href="@v.VendorUrl">@v.VendorName</a>
                             }
                             else
                             {
                                 <a class="product-card-vendor mb-2" href="@Routes.HOME">Blazor Media</a>
                             }

                             @if ( p.SalePrice is not null )
                             {
                                 <div>
                                     <span class="original-price">$@p.Price</span>
                                     <span class="sale-price">$@p.SalePrice</span>
                                 </div>
                             }
                             else
                             {
                                 <span class="price">$@p.Price</span>
                             }
                             <div class="w-100">
                                 <button class="btn btn-outline-primary fw-bolder w-100 mt-2" onclick="@( async () => await AddToCart( p ) )">Buy Now</button>
                                 <a class="btn btn-outline-secondary fw-bolder w-100 mt-2" href="@Routes.PRODUCT/@p.Id">Details</a>
                             </div>
                         </div>
                     </div>
                 </div>
             }
        }
    </div>

    <div class="w-100 mt-3 d-flex flex-row align-items-center justify-content-center">
        <Pagination @ref="_pagination" OnPageChange="@OnPageChanged"></Pagination>
    </div>
</div>