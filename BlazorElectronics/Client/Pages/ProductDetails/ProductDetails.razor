@page "/product/{id:int}"
@using BlazorElectronics.Client.Services.Products
@using BlazorElectronics.Shared
@using BlazorElectronics.Shared.DtosOutbound.Products
@using BlazorElectronics.Client.Services.Users.Cart
@using BlazorElectronics.Shared.Mutual
@using BlazorElectronics.Shared.Outbound.Products
@inject IProductServiceClient ProductServiceClient
@inject ICartServiceClient CartService
@implements IDisposable

@if ( !_loaded || _productDetails == null )
{
    <span>@_serverMessage</span>
}
else {
    <div class="pd-page">
        <div class="pd-top">
            <div class="pd-images-wrapper">
                <div class="pd-img-selected-wrapper">
                    <img class="pd-img-selected" src="@_productDetails.Images[ 0 ].Url" alt="@_productDetails.Title"/>
                </div>
                <div class="pd-img-selection">
                    @foreach ( ProductImageResponse img in _productDetails.Images )
                    {
                        <img class="pd-img-mini" src="@img.Url" alt="@_productDetails.Description"/>
                    }
                </div>
            </div>
            <div class="pd-summary">
                <!-- Display Product Title -->
                <h2 class="mb-0">@_productDetails.Title</h2>

                <!-- Get Selected Variant -->
                @if ( !GetSelectedVariant( out ProductVariantResponse variant ) )
                {
                    <span>No Product Variants Found!</span>
                }

                <!-- Display Variant Selection -->
                @if ( _productDetails.Variants.Count > 1 )
                {
                    <div>
                        <select class="form-control" @bind="_currentVariantId">
                            @foreach ( ProductVariantResponse v in _productDetails.Variants )
                            {
                                <option value="@v.Id">@v.Name</option>
                            }
                        </select>
                    </div>
                }
            </div>
            <div class="pd-pricing">
                <!-- Display Selected Variant Price -->
                @if ( variant.SalePrice > 0 && variant.SalePrice < variant.Price )
                {
                    <h6 class="text-muted">
                        $@variant.Price
                    </h6>
                    <h4 class="price">
                        $@variant.SalePrice
                    </h4>
                }
                else
                {
                    <h4 class="price">
                        $@variant.Price
                    </h4>
                }
            </div>
            <button class="btn btn-primary" @onclick="AddToCart">
                <i class="oi oi-cart">&nbsp;&nbsp;&nbsp;Add to Cart</i>
            </button>
        </div>
        
        <!-- Display Product Details Content -->
        <div class="pd-content">
            <p>@_productDetails.Description</p>
        </div>
    </div>
}

<span>@_cartMessage</span>

@code {
    string _serverMessage = "Loading Product Details...";
    string _cartMessage = string.Empty;
    bool _loaded = false;

    ProductDetailsResponse? _productDetails = null;
    int _currentImageIndex = 0;
    int _currentVariantId = 1;

    [Parameter]
    public int Id { get; set; }

    public void Dispose()
    {
        CartService.PostErrorEvent -= OnCartError;
    }
    protected override void OnInitialized()
    {
        CartService.PostErrorEvent += OnCartError;
    }
    protected override async Task OnParametersSetAsync()
    {
        _serverMessage = "Loading Product Details...";

        ApiReply<ProductDetailsResponse?> response = await ProductServiceClient.GetProductDetails( Id );
        _loaded = true;

        if ( response.Data == null || !response.Success )
        {
            _serverMessage = response.Message ?? "Server error without a given message!";
            return;
        }

        _productDetails = response.Data;

        if ( _productDetails.Variants.Count > 0 )
        {
            _currentVariantId = _productDetails.Variants[ 0 ].Id;
        }
    }
    async Task AddToCart()
    {
        if ( !GetSelectedVariant( out ProductVariantResponse variant ) )
        {
            OnCartError( "Failed to get variant!" );
            return;   
        }

        var cartItem = new CartProductResponse {
            ProductId = _productDetails!.Id,
            ProductTitle = _productDetails.Title,
            VariantId = variant.Id,
            VariantName = variant.Name
        };

        await CartService.AddToCart( cartItem );
    }
    bool GetSelectedVariant( out ProductVariantResponse variant )
    {
        variant = _productDetails!.Variants.FirstOrDefault( v => v.Id == _currentVariantId )!;
        return variant != null;
    }
    void OnCartError( string message )
    {
        _cartMessage = message;
        StateHasChanged();
    }
}