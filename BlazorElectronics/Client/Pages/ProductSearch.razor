@page "/{category}/search/{searchText}"
@page "/search/{searchText}"
@page "/{category}"
@inject IProductServiceClient ProductServiceClient;
@inject NavigationManager NavigationManager;
@using BlazorElectronics.Client.Services.Products
@using BlazorElectronics.Shared.DataTransferObjects.Products
@using System.Web
@using System.Collections.Specialized
@using System.Reflection
@using System.Text

<ProductList></ProductList>
<span></span>

@code {
    [Parameter]
    public string? Category { get; set; }
    [Parameter]
    public string? SearchText { get; set; }

    string exceptionMessage = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        ProductSearchFilters_DTO filters = MapFilterQueryParamters( NavigationManager );

        try
        {
            if ( Category != null && SearchText != null )
                await ProductServiceClient.SearchProductsByCategoryAndText( Category, SearchText, filters );
            else if ( Category != null )
                await ProductServiceClient.SearchProductsByCategory( Category, filters );
            else if ( SearchText != null )
                await ProductServiceClient.SearchProductsByText( SearchText, filters );
            else throw new Exception( "No valid input parameters provided for product search!" );
        }
        catch ( Exception e )
        {
            exceptionMessage = e.Message;
        }
        

        
    }

    static ProductSearchFilters_DTO MapFilterQueryParamters( NavigationManager navManager )
    {
        Uri uri = navManager.ToAbsoluteUri( navManager.Uri );
        NameValueCollection queryParameters = HttpUtility.ParseQueryString( uri.Query );
        
        var filtersDTO = new ProductSearchFilters_DTO();
        Type type = typeof( ProductSearchFilters_DTO );

        foreach ( string? key in queryParameters.AllKeys )
        {
            if ( string.IsNullOrEmpty( key ) )
                continue;

            var parsedKeyBuilder = new StringBuilder();
            parsedKeyBuilder.Append( char.ToUpper( key[ 0 ] ) );

            for ( int i = 1; i < key.Length; i++ )
            {
                if ( key[ i ] == '-' )
                    continue;
                if ( key[ i - 1 ] == '-' )
                {
                    parsedKeyBuilder.Append( char.ToUpper( key[ i ] ) );
                    continue;
                }
                parsedKeyBuilder.Append( char.ToLower( key[ i ] ) );
            }

            string filterName = parsedKeyBuilder.ToString();
            var stringValue = queryParameters[ key ];
            PropertyInfo? propertyInfo = type.GetProperty( filterName );

            if ( propertyInfo != null )
            {
                var convertedValue = Convert.ChangeType( stringValue, propertyInfo.PropertyType );
                propertyInfo.SetValue( filtersDTO, convertedValue );
                continue;
            }

            filtersDTO.SpecFilters.Add( new ProductSpecFilter_DTO {
                SpecName = key,
                SpecValue = Convert.ChangeType( stringValue, typeof( object ) )
            } );
        }

        return filtersDTO;
    }
}