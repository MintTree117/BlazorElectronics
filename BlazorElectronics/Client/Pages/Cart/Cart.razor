@page "/cart"

@using BlazorElectronics.Client.Services.Cart
@using BlazorElectronics.Shared
@using BlazorElectronics.Shared.Mutual

@implements IDisposable

@inject ICartServiceClient CartService

<PageTitle>Shopping Cart</PageTitle>

<h3>Shopping Cart</h3>

@if ( _cart == null || _cart.Items.Count <= 0 )
{
    <span>@_serverMessage</span>
}
else
{
    <div class="container">
        @foreach ( CartItem_DTO item in _cart.Items )
        {
            <div class="image-wrapper">
                <img class="cart-item-image" src="@item.ProductThumbnail" alt="@item.ProductTitle">
            </div>
            <div class="cart-item-name">
                <h5>
                    <a href="/product/@item.ProductId">@item.ProductTitle</a>
                </h5>
                <span>@item.VariantName</span>
                <input class="form-control input-quantity" type="number" value="@item.Quantity" @onchange="@(async ( ChangeEventArgs e ) => { await UpdateQuantity( e, item ); })" min="1" />
                <button class="btn btn-danger" @onclick="async () => { await RemoveFromCart( item ); }">Remove</button>
            </div>
            <div class="cart-item-price">
                @if ( item.HasSale() )
                {
                    <h6 class="text-muted">
                        $@(item.MainPrice * item.Quantity)
                    </h6>
                    <h4 class="price">
                        $@(item.SalePrice * item.Quantity)
                    </h4>
                }
                else
                {
                    <h4 class="price">
                        $@(item.MainPrice * item.Quantity)
                    </h4>
                }
            </div>
        }
        <div class="cart-total-price">
            Total: @_cart.GetTotalPrice()
        </div>
    </div>
}

@code 
{
    string _serverMessage = string.Empty;
    Cart_DTO? _cart = null;

    public void Dispose()
    {
        CartService.PostErrorEvent -= OnCartServerError;
    }
    protected override void OnInitialized()
    {
        CartService.PostErrorEvent += OnCartServerError;
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadCart();
    }
    
    async Task LoadCart()
    {
        ApiReply<Cart_DTO?> response = await CartService.GetCart();

        if ( !response.Success )
            _serverMessage = response.Message ??= "Failed to get cart! No response message!";

        _cart = response.Data;

        if ( _cart == null || _cart.Items.Count <= 0 )
            _serverMessage = "Your cart is empty.";
    }
    async Task RemoveFromCart( CartItem_DTO item )
    {
        await CartService.RemoveFromCart( item );
        await LoadCart();
    }
    async Task UpdateQuantity( ChangeEventArgs e, CartItem_DTO item )
    {
        item.Quantity = int.Parse( e.Value?.ToString() ?? "1" );
        if ( item.Quantity < 1 )
            item.Quantity = 1;
        await CartService.UpdateItemQuantity( item );
        await LoadCart();
    }

    void OnCartServerError( string errorMessage )
    {
        _serverMessage = errorMessage;
        StateHasChanged();
    }
}