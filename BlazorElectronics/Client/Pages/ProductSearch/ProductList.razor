@using BlazorElectronics.Client.Services.Products
@using BlazorElectronics.Shared
@using System.Globalization
@using BlazorElectronics.Shared.DtosOutbound.Products
@inject IProductServiceClient ProductService;
@inject NavigationManager NavigationManager;
@implements IDisposable;

@if ( !_loadedData || _productSearch == null ) {
    <span>@_serverMessage</span>
}
else {
    <ul class="list-unstyled">
        @foreach ( Product_DTO product in _productSearch.Products ) {
            <li class="pl-item my-3">
                <div class="pl-item-img-wrapper mr-2">
                    <a href="/product/@product.Id">
                        <img class="pl-item-img" src="@product.Thumbnail" alt="@product.Title"/>
                    </a>
                </div>
                <div class="pl-item-body">
                    <a href="/Product/@product.Id">
                        <h4 class="mb-0">@product.Title</h4>
                        <h5 class="price">
                            @GetPrice( product )
                        </h5>
                    </a>
                </div>
            </li>
        }
    </ul>
    <div>
        @for ( int i = 1; i <= _productSearch.TotalPages; i++ )
        {
            int index = i;
            <button type="button" class="btn @(index == _productSearch.CurrentPage ? "btn-primary" : "btn-secondary")" @onclick="() => { ChangeSearchPage( index ); }">@index</button>
        }
    </div>
}

@code {
    bool _loadedData = false;
    string _serverMessage = "Loading Products...";

    ProductSearchResults_DTO? _productSearch;
    
    protected override void OnInitialized()
    {
        ProductService.ProductSearchChanged += OnProductsChange;
    }
    public void Dispose()
    {
        ProductService.ProductSearchChanged -= OnProductsChange;
    }

    void ChangeSearchPage( int page )
    {
        ProductService.UpdateSearchPage( page );
        string? url = ProductService.GetProductSearchUrl();

        NavigationManager.NavigateTo( string.IsNullOrEmpty( url ) ? "/" : url );
    }
    void OnProductsChange( Reply<ProductSearchResults_DTO?>? productSearch  )
    {
        StateHasChanged();
        
        if ( productSearch == null )
        {
            _productSearch = null;
            _serverMessage = "Failed to load products! No server message received.";
            StateHasChanged();
            return;
        }

        if ( productSearch.Data == null || !productSearch.Success )
        {
            _productSearch = null;
            _serverMessage = productSearch.Message ?? "Failed to load products! No server message received.";
            StateHasChanged();
            return;
        }

        if ( productSearch.Data.Products.Count <= 0 )
        {
            _productSearch = null;
            _serverMessage = "No products found!";
            StateHasChanged();
            return;
        }
        
        _productSearch = productSearch.Data;
        _loadedData = true;
        StateHasChanged();
    }
    string GetPrice( Product_DTO product )
    {
        switch ( product.Variants.Count )
        {
            case <= 0: return "No Price Found!";
            case 1: return product.Variants[ 0 ].Price.ToString( CultureInfo.InvariantCulture );
            default:{
                decimal minPrice = product.Variants.Min( v => v.Price );
                return $"Starting at {minPrice}";
            }
        }
    }
}