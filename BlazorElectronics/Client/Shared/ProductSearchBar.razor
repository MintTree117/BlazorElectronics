@using BlazorElectronics.Client.Services.Products
@using BlazorElectronics.Shared
@using BlazorElectronics.Shared.DataTransferObjects.Products
@inject NavigationManager NavigationManager;
@inject IProductServiceClient ProductService;

<div class="input-group">
    <input @bind-value="_searchText"
           @bind-value:event="oninput"
           type="search"
           list="products"
           @onkeyup="HandleSearch"
           class="form-control"
           placeholder="Search Products..."
           @ref="_searchInputElement"/>
    <datalist id="products">
        @foreach ( string s in _suggestions )
        {
            <option>@s</option>
        }
    </datalist>
    <div class="input-group-append">
        <button class="btn btn-primary" @onclick="SearchProducts">
            <span class="oi oi-magnifying-glass"></span>
        </button>
    </div>
    <span>@_exceptionMessage</span>
</div>

@code {
    string _exceptionMessage = string.Empty;
    ElementReference _searchInputElement;
    string _searchText = string.Empty;
    List<string> _suggestions = new();

    protected override async Task OnAfterRenderAsync( bool firstRender )
    {
        if ( firstRender )
            await _searchInputElement.FocusAsync();
    }

    void SearchProducts()
    {
        NavigationManager.NavigateTo( $"search/{_searchText}" );
    }
    async Task HandleSearch( KeyboardEventArgs args )
    {
        if ( args.Key is null or "Enter" )
            SearchProducts();
        else if ( _searchText.Length < 1 )
            return;

        ServiceResponse<ProductSearchSuggestions_DTO?> suggestionResponse = await ProductService.GetProductSearchSuggestions( _searchText );

        if ( suggestionResponse.Data == null || !suggestionResponse.Success )
        {
            _suggestions = new List<string>();
            return;
        }

        _suggestions = suggestionResponse.Data.Suggestions;
    }
}