@using Blazored.LocalStorage
@using BlazorElectronics.Client.Models
@using BlazorElectronics.Client.Services.Cart
@using BlazorElectronics.Client.Services.Users
@using BlazorElectronics.Shared
@using BlazorElectronics.Shared.Users
@using Microsoft.AspNetCore.Components.Authorization

@implements IDisposable

@inject IUserServiceClient UserService
@inject ICartServiceClient CartService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavManager

@if ( !_isAuthorized )
{
    <button class="btn" @onclick="ToggleUserMenu">
        <a class="text-decoration-none link-dark" href="@Routes.LOGIN"><i class="oi oi-person"></i></a>
    </button>
}
else
{
    <div class="dropdown">
        <button class="btn dropdown-toggle"
                id="userDropdown"
                data-bs-toggle="dropdown" 
                aria-expanded="false" 
                data-bs-offset="-60,0"
                @onclick="ToggleUserMenu"
                @onfocusout="HideUserMenu">
            <i class="oi oi-person"></i>
        </button>

        <div class="dropdown-menu @_userMenuCssClass" aria-labelledby="userDropdown">
            @if ( _isAuthorized )
            {
                <a class="dropdown-item" href="profile">Profile</a>
                <hr/>
                <button class="dropdown-item" @onclick="@(async () => await Logout() )">Logout</button>

                @if ( _isAdmin )
                {
                    <hr/>
                    <a class="dropdown-item" href="admin/bulk/categories">Bulk Categories</a>
                    <a class="dropdown-item" href="admin/bulk/product-keys">Bulk Product Keys</a>
                    <hr/>
                    <a class="dropdown-item" href="admin/crud/categories">Categories</a>
                    <a class="dropdown-item" href="admin/crud/featured-deals">Featured Deals</a>
                    <a class="dropdown-item" href="admin/crud/features">Features</a>
                    <a class="dropdown-item" href="admin/crud/products">Products</a>
                    <a class="dropdown-item" href="admin/crud/spec-lookups">Specifications</a>
                    <a class="dropdown-item" href="admin/crud/vendors">Vendors</a>
                    <hr/>
                    <a class="dropdown-item" href="admin/seed">Seed Db</a>
                }
            }
            else
            {
                <a class="dropdown-item" href="login?returnUrl=@NavManager.ToBaseRelativePath( NavManager.Uri )">Login</a>
                <a class="dropdown-item" href="registration">Register</a>
            }
        </div>
    </div>   
}

@code 
{
    bool _isAuthorized = false;
    bool _isAdmin = false;
    bool _showUserMenu = false;
    string? _userMenuCssClass => _showUserMenu ? "show-user-menu" : null;

    protected override void OnInitialized()
    {
        UserService.SessionChanged += HandleSessionChange;
    }
    protected override async Task OnInitializedAsync()
    {
        SessionMeta? sessionReply = await UserService.GetSessionMeta();
        await HandleSessionChange( this, sessionReply );
    }
    public void Dispose()
    {
        UserService.SessionChanged -= HandleSessionChange;
    }
    
    async Task HideUserMenu()
    {
        await Task.Delay( 200 );
        _showUserMenu = false;
    }
    async Task Logout()
    {
        await UserService.Logout();
        NavManager.NavigateTo( "" );
    }
    
    void ToggleUserMenu()
    {
        _showUserMenu = !_showUserMenu;
        StateHasChanged();
    }
    async Task HandleSessionChange( object sender, SessionMeta? meta )
    {
        _isAuthorized = meta is not null;
        _isAdmin = meta is not null && meta.Type == SessionType.Admin;
        
        await CartService.UpdateCart();
        
        StateHasChanged();
    }
}