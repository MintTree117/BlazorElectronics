@using Blazored.LocalStorage
@using BlazorElectronics.Client.Services.Users
@using BlazorElectronics.Shared
@using BlazorElectronics.Shared.Users
@using Microsoft.AspNetCore.Components.Authorization

@implements IDisposable

@inject IUserServiceClient UserService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavManager

<div class="dropdown">
    <button class="btn btn-secondary dropdown-toggle user-button"
            @onclick="ToggleUserMenu"
            @onfocusout="HideUserMenu">
        <i class="oi oi-person"></i>
    </button>
    <div class="dropdown-menu dropdown-menu-right @_userMenuCssClass">
        @if ( _isAuthorized )
        {
            <a class="dropdown-item" href="profile">Profile</a>
            <hr/>
            <button class="dropdown-item" @onclick="@(async () => await Logout() )">Logout</button>
            
            @if ( _isAdmin )
            {
                <hr/>
                <h6>Admin</h6>
                <a class="dropdown-item" href="admin/categories/view">Categories</a>
                <a class="dropdown-item" href="admin/features/view">Features</a>
                <a class="dropdown-item" href="admin/products/view">Products</a>
                <a class="dropdown-item" href="admin/specs/view">Specifications</a>
                <a class="dropdown-item" href="admin/variants/view">Variants</a>
                <a class="dropdown-item" href="admin/vendors/view">Vendors</a>
                <hr/>
            }
        }
        else
        {
            <a class="dropdown-item" href="login?returnUrl=@NavManager.ToBaseRelativePath( NavManager.Uri )">Login</a>
            <a class="dropdown-item" href="registration">Register</a>
        }
    </div>
</div>

@code 
{
    bool _isAuthorized = false;
    bool _isAdmin = false;
    bool _showUserMenu = false;
    string? _userMenuCssClass => _showUserMenu ? "show-user-menu" : null;

    protected override void OnInitialized()
    {
        UserService.SessionChanged += HandleAuthorizationChange;
    }
    protected override async Task OnInitializedAsync()
    {
        ApiReply<UserSessionResponse?> authorizeReply = await UserService.AuthorizeUser();
        HandleAuthorizationChange( authorizeReply.Data );
    }
    public void Dispose()
    {
        UserService.SessionChanged -= HandleAuthorizationChange;
    }
    
    async Task HideUserMenu()
    {
        await Task.Delay( 200 );
        _showUserMenu = false;
    }
    async Task Logout()
    {
        await UserService.Logout();
        NavManager.NavigateTo( "" );
    }
    
    void ToggleUserMenu()
    {
        _showUserMenu = !_showUserMenu;
        StateHasChanged();
    }
    void HandleAuthorizationChange( UserSessionResponse? sessionResponse )
    {
        _isAuthorized = sessionResponse is not null;
        _isAdmin = sessionResponse is not null && sessionResponse.IsAdmin;
        StateHasChanged();
    }
}